<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Frameset//EN""http://www.w3.org/TR/REC-html40/frameset.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Wed Sep 11 15:14:46 CEST 2002 -->
<TITLE>
: Class  ImageAccess
</TITLE>
<LINK REL ="stylesheet" TYPE="text/css" HREF="stylesheet.css" TITLE="Style">
</HEAD>
<BODY BGCOLOR="white">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2">&nbsp;</TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY: &nbsp;INNER&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL: &nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
Class  ImageAccess</H2>
<PRE>
java.lang.Object
  |
  +--<B>ImageAccess</B>
</PRE>
<HR>
<DL>
<DT>public class <B>ImageAccess</B><DT>extends java.lang.Object</DL>

<P>
ImageAccess is an interface layer to facilitate the access
 to the pixels of ImageJ images. 
 Methods of ImageAccess provides an easy and robust way to 
 access to the pixels of images.

 The data are stored in an double array. 
 Many methods get/put allows to access to the data. If the
 user try to access outside of the image, the mirror boundary
 conditions are applied.

<!-- ======== INNER CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#PATTERN_CROSS_3x3">PATTERN_CROSS_3x3</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#PATTERN_SQUARE_3x3">PATTERN_SQUARE_3x3</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="ImageAccess.html#ImageAccess(ij.process.ColorProcessor, int)">ImageAccess</A></B>(ij.process.ColorProcessor&nbsp;cp,
            int&nbsp;colorPlane)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new object of the class ImageAccess from an 
 ColorProcessor object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="ImageAccess.html#ImageAccess(double[][])">ImageAccess</A></B>(double[][]&nbsp;array)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new ImageAccess object from a 2D double array of pixels.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="ImageAccess.html#ImageAccess(ij.process.ImageProcessor)">ImageAccess</A></B>(ij.process.ImageProcessor&nbsp;ip)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new object of the class ImageAccess from an 
 ImageProcessor object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="ImageAccess.html#ImageAccess(int, int)">ImageAccess</A></B>(int&nbsp;nx,
            int&nbsp;ny)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new object of the class ImageAccess.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#abs()">abs</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compute the absolute value.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#add(double)">add</A></B>(double&nbsp;constant)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for adding
 a constant to each pixel.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#add(ImageAccess, ImageAccess)">add</A></B>(<A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im1,
    <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for adding
 two ImageAccess objects.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;ij.process.ByteProcessor</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#createByteProcessor()">createByteProcessor</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a ByteProcessor from the pixel data.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;ij.process.FloatProcessor</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#createFloatProcessor()">createFloatProcessor</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a FloatProcessor from the pixel data.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#divide(double)">divide</A></B>(double&nbsp;constant)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for dividing
 a constant to each pixel.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#divide(ImageAccess, ImageAccess)">divide</A></B>(<A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im1,
       <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for dividing
 two ImageAccess objects.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="ImageAccess.html">ImageAccess</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#duplicate()">duplicate</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new ImageAccess object by duplication of the current the 
 ImageAccess object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double[][]</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getArrayPixels()">getArrayPixels</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a copy of the pixel data organize in a
 2D array.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getColumn(int, double[])">getColumn</A></B>(int&nbsp;x,
          double[]&nbsp;column)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for getting a 
 whole column of the image.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getColumn(int, int, double[])">getColumn</A></B>(int&nbsp;x,
          int&nbsp;y,
          double[]&nbsp;column)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for getting a part 
 of column.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getHeight()">getHeight</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the height of the image.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getInterpolatedPixel(double, double)">getInterpolatedPixel</A></B>(double&nbsp;x,
                     double&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for getting
 the gray level of a selected pixel using a bilinear interpolation.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getMaximum()">getMaximum</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the maximum value of ImageAccess.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getMean()">getMean</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the mean value of ImageAccess.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getMinimum()">getMinimum</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the minimum value of ImageAccess.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getNeighborhood(int, int, double[][])">getNeighborhood</A></B>(int&nbsp;x,
                int&nbsp;y,
                double[][]&nbsp;neigh)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for getting a neighborhood
 arround a pixel position.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getPattern(int, int, double[], int)">getPattern</A></B>(int&nbsp;x,
           int&nbsp;y,
           double[]&nbsp;neigh,
           int&nbsp;pattern)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for getting a
 neighborhood of a predefined pattern around a selected pixel (x,y).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getPixel(int, int)">getPixel</A></B>(int&nbsp;x,
         int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for getting
 the gray level of a selected pixel.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getPixels()">getPixels</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a reference to the pixel data in double (1D).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getRow(int, double[])">getRow</A></B>(int&nbsp;y,
       double[]&nbsp;row)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for getting a 
 whole row of the image.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getRow(int, int, double[])">getRow</A></B>(int&nbsp;x,
       int&nbsp;y,
       double[]&nbsp;row)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for getting a part 
 of row.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getSubImage(int, int, ImageAccess)">getSubImage</A></B>(int&nbsp;x,
            int&nbsp;y,
            <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;output)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method to get a sub-image 
 with the upper left corner in the coordinate (x,y).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#getWidth()">getWidth</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the width of the image.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#multiply(double)">multiply</A></B>(double&nbsp;constant)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for multiplying
 a constant to each pixel.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#multiply(ImageAccess, ImageAccess)">multiply</A></B>(<A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im1,
         <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for multiplying
 two ImageAccess objects.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#normalizeContrast()">normalizeContrast</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stretches the contrast inside an image so that the gray levels 
 are in the range 0 to 255.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#pow(double)">pow</A></B>(double&nbsp;a)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Raised an ImageAccess object to the power a.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#putArrayPixels(double[][])">putArrayPixels</A></B>(double[][]&nbsp;array)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method in order to put 
 an 2D array of double in an ImageAccess.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#putColumn(int, double[])">putColumn</A></B>(int&nbsp;x,
          double[]&nbsp;column)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method to put a whole 
 column in a specified position into the image.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#putColumn(int, int, double[])">putColumn</A></B>(int&nbsp;x,
          int&nbsp;y,
          double[]&nbsp;column)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method to put a part of column
 into the image.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#putPixel(int, int, double)">putPixel</A></B>(int&nbsp;x,
         int&nbsp;y,
         double&nbsp;value)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method in order a value
 of the gray level to be put to a position inside it
 given by the coordinates.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#putRow(int, double[])">putRow</A></B>(int&nbsp;y,
       double[]&nbsp;row)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method to put a whole 
 row in a specified position into the image.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#putRow(int, int, double[])">putRow</A></B>(int&nbsp;x,
       int&nbsp;y,
       double[]&nbsp;row)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method to put a part of row
 into the image.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#putSubImage(int, int, ImageAccess)">putSubImage</A></B>(int&nbsp;x,
            int&nbsp;y,
            <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;input)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method to put a sub-image 
 with the upper left corner in the coordinate (x,y).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#setConstant(double)">setConstant</A></B>(double&nbsp;constant)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method to set a constant
 value to all pixels of the image.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#show(java.lang.String)">show</A></B>(java.lang.String&nbsp;title)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Display an image.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#show(java.lang.String, java.awt.Point)">show</A></B>(java.lang.String&nbsp;title,
     java.awt.Point&nbsp;loc)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Display an image at a specific position (x, y).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#sqrt()">sqrt</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compute the square root of an ImageAccess.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#subtract(double)">subtract</A></B>(double&nbsp;constant)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for adding
 a constant to each pixel.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="ImageAccess.html#subtract(ImageAccess, ImageAccess)">subtract</A></B>(<A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im1,
         <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An ImageAccess object calls this method for subtracting
 two ImageAccess objects.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="PATTERN_SQUARE_3x3"><!-- --></A><H3>
PATTERN_SQUARE_3x3</H3>
<PRE>
public static final int <B>PATTERN_SQUARE_3x3</B></PRE>
<DL>
</DL>
<HR>

<A NAME="PATTERN_CROSS_3x3"><!-- --></A><H3>
PATTERN_CROSS_3x3</H3>
<PRE>
public static final int <B>PATTERN_CROSS_3x3</B></PRE>
<DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="ImageAccess(double[][])"><!-- --></A><H3>
ImageAccess</H3>
<PRE>
public <B>ImageAccess</B>(double[][]&nbsp;array)</PRE>
<DL>
<DD>Creates a new ImageAccess object from a 2D double array of pixels.
 The size of the array determines the size of the image.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>array</CODE> - an array of pixel (2D)</DL>
</DD>
</DL>
<HR>

<A NAME="ImageAccess(ij.process.ImageProcessor)"><!-- --></A><H3>
ImageAccess</H3>
<PRE>
public <B>ImageAccess</B>(ij.process.ImageProcessor&nbsp;ip)</PRE>
<DL>
<DD>Creates a new object of the class ImageAccess from an 
 ImageProcessor object.

 ImageProcessor object contains the image data, the size and 
 the type of the image. The ImageProcessor is provided by ImageJ,
 it should by a 8-bit, 16-bit.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>ip</CODE> - an ImageProcessor object provided by ImageJ</DL>
</DD>
</DL>
<HR>

<A NAME="ImageAccess(ij.process.ColorProcessor, int)"><!-- --></A><H3>
ImageAccess</H3>
<PRE>
public <B>ImageAccess</B>(ij.process.ColorProcessor&nbsp;cp,
                   int&nbsp;colorPlane)</PRE>
<DL>
<DD>Creates a new object of the class ImageAccess from an 
 ColorProcessor object.

 ImageProcessor object contains the image data, the size and 
 the type of the image. The ColorProcessor is provided by ImageJ,
 The ImageAccess contains one plane (red, green or blue) selected
 with the colorPlane parameter.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>cp</CODE> - an ColorProcessor object<DD><CODE>colorPlane</CODE> - index of the color plane 0, 1 or 2</DL>
</DD>
</DL>
<HR>

<A NAME="ImageAccess(int, int)"><!-- --></A><H3>
ImageAccess</H3>
<PRE>
public <B>ImageAccess</B>(int&nbsp;nx,
                   int&nbsp;ny)</PRE>
<DL>
<DD>Creates a new object of the class ImageAccess.

 The size of the image are given as parameter.
 The data pixels are empty and are not initialized.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>nx</CODE> - the size of the image along the X-axis<DD><CODE>ny</CODE> - the size of the image along the Y-axis</DL>
</DD>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="getWidth()"><!-- --></A><H3>
getWidth</H3>
<PRE>
public int <B>getWidth</B>()</PRE>
<DL>
<DD>Return the width of the image.<DD><DL>
<DT><B>Returns:</B><DD>the image width</DL>
</DD>
</DL>
<HR>

<A NAME="getHeight()"><!-- --></A><H3>
getHeight</H3>
<PRE>
public int <B>getHeight</B>()</PRE>
<DL>
<DD>Return the height of the image.<DD><DL>
<DT><B>Returns:</B><DD>the image height</DL>
</DD>
</DL>
<HR>

<A NAME="getMaximum()"><!-- --></A><H3>
getMaximum</H3>
<PRE>
public double <B>getMaximum</B>()</PRE>
<DL>
<DD>Return the maximum value of ImageAccess.<DD><DL>
<DT><B>Returns:</B><DD>the maximum value</DL>
</DD>
</DL>
<HR>

<A NAME="getMinimum()"><!-- --></A><H3>
getMinimum</H3>
<PRE>
public double <B>getMinimum</B>()</PRE>
<DL>
<DD>Return the minimum value of ImageAccess.<DD><DL>
<DT><B>Returns:</B><DD>the minimum value</DL>
</DD>
</DL>
<HR>

<A NAME="getMean()"><!-- --></A><H3>
getMean</H3>
<PRE>
public double <B>getMean</B>()</PRE>
<DL>
<DD>Return the mean value of ImageAccess.<DD><DL>
<DT><B>Returns:</B><DD>the mean value</DL>
</DD>
</DL>
<HR>

<A NAME="getArrayPixels()"><!-- --></A><H3>
getArrayPixels</H3>
<PRE>
public double[][] <B>getArrayPixels</B>()</PRE>
<DL>
<DD>Returns a copy of the pixel data organize in a
 2D array.<DD><DL>
<DT><B>Returns:</B><DD>the 2D double array</DL>
</DD>
</DL>
<HR>

<A NAME="getPixels()"><!-- --></A><H3>
getPixels</H3>
<PRE>
public double[] <B>getPixels</B>()</PRE>
<DL>
<DD>Returns a reference to the pixel data in double (1D).<DD><DL>
<DT><B>Returns:</B><DD>the 1D double array</DL>
</DD>
</DL>
<HR>

<A NAME="createFloatProcessor()"><!-- --></A><H3>
createFloatProcessor</H3>
<PRE>
public ij.process.FloatProcessor <B>createFloatProcessor</B>()</PRE>
<DL>
<DD>Create a FloatProcessor from the pixel data.<DD><DL>
<DT><B>Returns:</B><DD>the FloatProcessor</DL>
</DD>
</DL>
<HR>

<A NAME="createByteProcessor()"><!-- --></A><H3>
createByteProcessor</H3>
<PRE>
public ij.process.ByteProcessor <B>createByteProcessor</B>()</PRE>
<DL>
<DD>Create a ByteProcessor from the pixel data.<DD><DL>
<DT><B>Returns:</B><DD>the ByteProcessor</DL>
</DD>
</DL>
<HR>

<A NAME="duplicate()"><!-- --></A><H3>
duplicate</H3>
<PRE>
public <A HREF="ImageAccess.html">ImageAccess</A> <B>duplicate</B>()</PRE>
<DL>
<DD>Create a new ImageAccess object by duplication of the current the 
 ImageAccess object.<DD><DL>
<DT><B>Returns:</B><DD>a new ImageAccess object</DL>
</DD>
</DL>
<HR>

<A NAME="getPixel(int, int)"><!-- --></A><H3>
getPixel</H3>
<PRE>
public double <B>getPixel</B>(int&nbsp;x,
                       int&nbsp;y)</PRE>
<DL>
<DD>An ImageAccess object calls this method for getting
 the gray level of a selected pixel.

 Mirror border conditions are applied.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - input, the integer x-coordinate of a pixel<DD><CODE>y</CODE> - input, the integer y-coordinate of a pixel<DT><B>Returns:</B><DD>the gray level of the pixel (double)</DL>
</DD>
</DL>
<HR>

<A NAME="getInterpolatedPixel(double, double)"><!-- --></A><H3>
getInterpolatedPixel</H3>
<PRE>
public double <B>getInterpolatedPixel</B>(double&nbsp;x,
                                   double&nbsp;y)</PRE>
<DL>
<DD>An ImageAccess object calls this method for getting
 the gray level of a selected pixel using a bilinear interpolation.
 The coordinates can be given in double and the 
 bilinear interpolation is applied the find the gray level.

 Mirror border conditions are applied.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - input, the double x-coordinate of a pixel<DD><CODE>y</CODE> - input, the double y-coordinate of a pixel<DT><B>Returns:</B><DD>the gray level of the pixel (double)</DL>
</DD>
</DL>
<HR>

<A NAME="getColumn(int, double[])"><!-- --></A><H3>
getColumn</H3>
<PRE>
public void <B>getColumn</B>(int&nbsp;x,
                      double[]&nbsp;column)</PRE>
<DL>
<DD>An ImageAccess object calls this method for getting a 
 whole column of the image.

 The column should already created with the correct size [ny].<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - input, the integer x-coordinate of a column<DD><CODE>column</CODE> - output, an array of the type double</DL>
</DD>
</DL>
<HR>

<A NAME="getColumn(int, int, double[])"><!-- --></A><H3>
getColumn</H3>
<PRE>
public void <B>getColumn</B>(int&nbsp;x,
                      int&nbsp;y,
                      double[]&nbsp;column)</PRE>
<DL>
<DD>An ImageAccess object calls this method for getting a part 
 of column.
 The starting point is given by the y parameter and the ending
 determine by the size of the column parameter. The column 
 parameter should already created.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - input, the integer x-coordinate of a column<DD><CODE>y</CODE> - input, starting point<DD><CODE>column</CODE> - output, an array of the type double</DL>
</DD>
</DL>
<HR>

<A NAME="getRow(int, double[])"><!-- --></A><H3>
getRow</H3>
<PRE>
public void <B>getRow</B>(int&nbsp;y,
                   double[]&nbsp;row)</PRE>
<DL>
<DD>An ImageAccess object calls this method for getting a 
 whole row of the image.

 The row should already created with the correct size [nx].<DD><DL>
<DT><B>Parameters:</B><DD><CODE>y</CODE> - input, the integer y-coordinate of a row<DD><CODE>row</CODE> - output, an array of the type double</DL>
</DD>
</DL>
<HR>

<A NAME="getRow(int, int, double[])"><!-- --></A><H3>
getRow</H3>
<PRE>
public void <B>getRow</B>(int&nbsp;x,
                   int&nbsp;y,
                   double[]&nbsp;row)</PRE>
<DL>
<DD>An ImageAccess object calls this method for getting a part 
 of row.
 The starting point is given by the y parameter and the ending
 determine by the size of the row parameter. The row 
 parameter should already created.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - input, starting point<DD><CODE>y</CODE> - input, the integer y-coordinate of a row<DD><CODE>row</CODE> - output, an array of the type double</DL>
</DD>
</DL>
<HR>

<A NAME="getNeighborhood(int, int, double[][])"><!-- --></A><H3>
getNeighborhood</H3>
<PRE>
public void <B>getNeighborhood</B>(int&nbsp;x,
                            int&nbsp;y,
                            double[][]&nbsp;neigh)</PRE>
<DL>
<DD>An ImageAccess object calls this method for getting a neighborhood
 arround a pixel position.

 The neigh parameter should already created. The size of the array 
 determines the neighborhood block.

 <br>Mirror border conditions are applied.
 <br>
 <br>The pixel value of (x-n/2, y-n/2) is put into neigh[0][0]
 <br>...
 <br>The pixel value of (x+n/2, y+n/2) is put into neigh[n-1][n-1]
 <br>
 <br>For example if neigh is a double[4][4]:
 <br>The pixel value of (x-1, y-1) is put into neigh[0][0]
 <br>The pixel value of (x  , y  ) is put into neigh[1][1]
 <br>The pixel value of (x+1, y+1) is put into neigh[2][2]
 <br>The pixel value of (x+2, y+2) is put into neigh[3][3]
 <br>...
 <br>For example if neigh is a double[5][5]:
 <br>The pixel value of (x-2, y-2) is put into neigh[0][0]
 <br>The pixel value of (x-1, y-1) is put into neigh[1][1]
 <br>The pixel value of (x  , y  ) is put into neigh[2][2]
 <br>The pixel value of (x+1, y+1) is put into neigh[3][3]
 <br>The pixel value of (x+2, y+2) is put into neigh[4][4]<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - the integer x-coordinate of a selected central pixel<DD><CODE>y</CODE> - the integer y-coordinate of a selected central pixel<DD><CODE>neigh</CODE> - output, a 2D array s</DL>
</DD>
</DL>
<HR>

<A NAME="getPattern(int, int, double[], int)"><!-- --></A><H3>
getPattern</H3>
<PRE>
public void <B>getPattern</B>(int&nbsp;x,
                       int&nbsp;y,
                       double[]&nbsp;neigh,
                       int&nbsp;pattern)</PRE>
<DL>
<DD>An ImageAccess object calls this method for getting a
 neighborhood of a predefined pattern around a selected pixel (x,y).
 <br>The available patterns are:
 <br>- a 3*3 block: PATTERN_SQUARE_3x3 (8-connect)
 <br>- a 3*3 cross: PATTERN_CROSS_3x3  (4-connect)
 <br>
 <br>Mirror border conditions are applied.
 <br>The pixel is arranged in a 1D array according the following rules:
 <br>
 <br>If the pattern is PATTERN_SQUARE_3x3  (8-connect)
 <br>The pixel value of (x-1, y-1) are put into neigh[0]
 <br>The pixel value of (x  , y-1) are put into neigh[1]
 <br>The pixel value of (x+1, y-1) are put into neigh[2]
 <br>The pixel value of (x-1, y  ) are put into neigh[3]
 <br>The pixel value of (x  , y  ) are put into neigh[4]
 <br>The pixel value of (x+1, y  ) are put into neigh[5]
 <br>The pixel value of (x-1, y+1) are put into neigh[6]
 <br>The pixel value of (x  , y+1) are put into neigh[7]
 <br>The pixel value of (x+1, y+1) are put into neigh[8]
 <br>
 <br>If the pattern is PATTERN_CROSS_3x3   (4-connect)
 <br>The pixel value of (x  , y-1) are put into neigh[0]
 <br>The pixel value of (x-1, y  ) are put into neigh[1]
 <br>The pixel value of (x  , y  ) are put into neigh[2]
 <br>The pixel value of (x+1, y  ) are put into neigh[3]
 <br>The pixel value of (x  , y+1) are put into neigh[4]
 <br>
 <br>The neigh should already created as a double array of 9 elements
 for the PATTERN_SQUARE_3x3 or 5 elements for the PATTERN_CROSS_3x3.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - x-coordinate of a selected central pixel<DD><CODE>y</CODE> - y-coordinate of a selected central pixel<DD><CODE>neigh</CODE> - output, an array consisting of 9 or 5 elements<DD><CODE>pattern</CODE> - PATTERN_SQUARE_3x3 or PATTERN_CROSS_3x3.</DL>
</DD>
</DL>
<HR>

<A NAME="getSubImage(int, int, ImageAccess)"><!-- --></A><H3>
getSubImage</H3>
<PRE>
public void <B>getSubImage</B>(int&nbsp;x,
                        int&nbsp;y,
                        <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;output)</PRE>
<DL>
<DD>An ImageAccess object calls this method to get a sub-image 
 with the upper left corner in the coordinate (x,y).

 The sub-image ouptut should be already created.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - x-coordinate in the source image<DD><CODE>y</CODE> - y-coordinate in the source image<DD><CODE>output</CODE> - an ImageAccess object with the sub-image;</DL>
</DD>
</DL>
<HR>

<A NAME="putPixel(int, int, double)"><!-- --></A><H3>
putPixel</H3>
<PRE>
public void <B>putPixel</B>(int&nbsp;x,
                     int&nbsp;y,
                     double&nbsp;value)</PRE>
<DL>
<DD>An ImageAccess object calls this method in order a value
 of the gray level to be put to a position inside it
 given by the coordinates.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - input, the integer x-coordinate of a pixel<DD><CODE>y</CODE> - input, the integer y-coordinate of a pixel<DD><CODE>value</CODE> - input, a value of the gray level of the type double</DL>
</DD>
</DL>
<HR>

<A NAME="putColumn(int, double[])"><!-- --></A><H3>
putColumn</H3>
<PRE>
public void <B>putColumn</B>(int&nbsp;x,
                      double[]&nbsp;column)</PRE>
<DL>
<DD>An ImageAccess object calls this method to put a whole 
 column in a specified position into the image.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - input, the integer x-coordinate of a column<DD><CODE>column</CODE> - input, an array of the type double</DL>
</DD>
</DL>
<HR>

<A NAME="putColumn(int, int, double[])"><!-- --></A><H3>
putColumn</H3>
<PRE>
public void <B>putColumn</B>(int&nbsp;x,
                      int&nbsp;y,
                      double[]&nbsp;column)</PRE>
<DL>
<DD>An ImageAccess object calls this method to put a part of column
 into the image. The starting poisition in given by y and the ending
 position is determined by the size of the column array.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - input, the integer x-coordinate of a column<DD><CODE>y</CODE> - input, the integer y-coordinate of a column<DD><CODE>column</CODE> - input, an array of the type double</DL>
</DD>
</DL>
<HR>

<A NAME="putRow(int, double[])"><!-- --></A><H3>
putRow</H3>
<PRE>
public void <B>putRow</B>(int&nbsp;y,
                   double[]&nbsp;row)</PRE>
<DL>
<DD>An ImageAccess object calls this method to put a whole 
 row in a specified position into the image.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>y</CODE> - input, the integer x-coordinate of a column<DD><CODE>row</CODE> - input, an array of the type double</DL>
</DD>
</DL>
<HR>

<A NAME="putRow(int, int, double[])"><!-- --></A><H3>
putRow</H3>
<PRE>
public void <B>putRow</B>(int&nbsp;x,
                   int&nbsp;y,
                   double[]&nbsp;row)</PRE>
<DL>
<DD>An ImageAccess object calls this method to put a part of row
 into the image. The starting poisition in given by x and the ending
 position is determined by the size of the row array.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - input, the integer x-coordinate of a column<DD><CODE>y</CODE> - input, the integer y-coordinate of a column<DD><CODE>row</CODE> - input, an array of the type double</DL>
</DD>
</DL>
<HR>

<A NAME="putArrayPixels(double[][])"><!-- --></A><H3>
putArrayPixels</H3>
<PRE>
public void <B>putArrayPixels</B>(double[][]&nbsp;array)</PRE>
<DL>
<DD>An ImageAccess object calls this method in order to put 
 an 2D array of double in an ImageAccess.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>array</CODE> - input, the double array</DL>
</DD>
</DL>
<HR>

<A NAME="putSubImage(int, int, ImageAccess)"><!-- --></A><H3>
putSubImage</H3>
<PRE>
public void <B>putSubImage</B>(int&nbsp;x,
                        int&nbsp;y,
                        <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;input)</PRE>
<DL>
<DD>An ImageAccess object calls this method to put a sub-image 
 with the upper left corner in the coordinate (x,y).

 The sub-image input should be already created.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - x-coordinate in the source image<DD><CODE>y</CODE> - y-coordinate in the source image<DD><CODE>input</CODE> - an ImageAccess object that we want to put;</DL>
</DD>
</DL>
<HR>

<A NAME="setConstant(double)"><!-- --></A><H3>
setConstant</H3>
<PRE>
public void <B>setConstant</B>(double&nbsp;constant)</PRE>
<DL>
<DD>An ImageAccess object calls this method to set a constant
 value to all pixels of the image.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>constant</CODE> - a constant value</DL>
</DD>
</DL>
<HR>

<A NAME="normalizeContrast()"><!-- --></A><H3>
normalizeContrast</H3>
<PRE>
public void <B>normalizeContrast</B>()</PRE>
<DL>
<DD>Stretches the contrast inside an image so that the gray levels 
 are in the range 0 to 255.</DL>
<HR>

<A NAME="show(java.lang.String, java.awt.Point)"><!-- --></A><H3>
show</H3>
<PRE>
public void <B>show</B>(java.lang.String&nbsp;title,
                 java.awt.Point&nbsp;loc)</PRE>
<DL>
<DD>Display an image at a specific position (x, y).<DD><DL>
<DT><B>Parameters:</B><DD><CODE>title</CODE> - a string for the title<DD><CODE>loc</CODE> - Point for the location</DL>
</DD>
</DL>
<HR>

<A NAME="show(java.lang.String)"><!-- --></A><H3>
show</H3>
<PRE>
public void <B>show</B>(java.lang.String&nbsp;title)</PRE>
<DL>
<DD>Display an image.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>title</CODE> - a string for the title of the window</DL>
</DD>
</DL>
<HR>

<A NAME="abs()"><!-- --></A><H3>
abs</H3>
<PRE>
public void <B>abs</B>()</PRE>
<DL>
<DD>Compute the absolute value.</DL>
<HR>

<A NAME="sqrt()"><!-- --></A><H3>
sqrt</H3>
<PRE>
public void <B>sqrt</B>()</PRE>
<DL>
<DD>Compute the square root of an ImageAccess.</DL>
<HR>

<A NAME="pow(double)"><!-- --></A><H3>
pow</H3>
<PRE>
public void <B>pow</B>(double&nbsp;a)</PRE>
<DL>
<DD>Raised an ImageAccess object to the power a.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>a</CODE> - input</DL>
</DD>
</DL>
<HR>

<A NAME="add(double)"><!-- --></A><H3>
add</H3>
<PRE>
public void <B>add</B>(double&nbsp;constant)</PRE>
<DL>
<DD>An ImageAccess object calls this method for adding
 a constant to each pixel.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>constant</CODE> - a constant to be added</DL>
</DD>
</DL>
<HR>

<A NAME="multiply(double)"><!-- --></A><H3>
multiply</H3>
<PRE>
public void <B>multiply</B>(double&nbsp;constant)</PRE>
<DL>
<DD>An ImageAccess object calls this method for multiplying
 a constant to each pixel.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>constant</CODE> - a constant to be multiplied</DL>
</DD>
</DL>
<HR>

<A NAME="subtract(double)"><!-- --></A><H3>
subtract</H3>
<PRE>
public void <B>subtract</B>(double&nbsp;constant)</PRE>
<DL>
<DD>An ImageAccess object calls this method for adding
 a constant to each pixel.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>constant</CODE> - a constant to be added</DL>
</DD>
</DL>
<HR>

<A NAME="divide(double)"><!-- --></A><H3>
divide</H3>
<PRE>
public void <B>divide</B>(double&nbsp;constant)</PRE>
<DL>
<DD>An ImageAccess object calls this method for dividing
 a constant to each pixel.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>constant</CODE> - a constant to be multiplied</DL>
</DD>
</DL>
<HR>

<A NAME="add(ImageAccess, ImageAccess)"><!-- --></A><H3>
add</H3>
<PRE>
public void <B>add</B>(<A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im1,
                <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im2)</PRE>
<DL>
<DD>An ImageAccess object calls this method for adding
 two ImageAccess objects.

 [this = im1 + im2]

 The resulting ImageAccess and the two operands should have 
 the same size.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>im1</CODE> - an ImageAccess object to be added<DD><CODE>im2</CODE> - an ImageAccess object to be added</DL>
</DD>
</DL>
<HR>

<A NAME="multiply(ImageAccess, ImageAccess)"><!-- --></A><H3>
multiply</H3>
<PRE>
public void <B>multiply</B>(<A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im1,
                     <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im2)</PRE>
<DL>
<DD>An ImageAccess object calls this method for multiplying
 two ImageAccess objects.

 The resulting ImageAccess and the two operands should have 
 the same size.

 [this = im1 * im2]<DD><DL>
<DT><B>Parameters:</B><DD><CODE>im1</CODE> - an ImageAccess object to be multiplied<DD><CODE>im2</CODE> - an ImageAccess object to be multiplied</DL>
</DD>
</DL>
<HR>

<A NAME="subtract(ImageAccess, ImageAccess)"><!-- --></A><H3>
subtract</H3>
<PRE>
public void <B>subtract</B>(<A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im1,
                     <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im2)</PRE>
<DL>
<DD>An ImageAccess object calls this method for subtracting
 two ImageAccess objects.

 The resulting ImageAccess and the two operands should have 
 the same size.

 [this = im1 - im2]<DD><DL>
<DT><B>Parameters:</B><DD><CODE>im1</CODE> - an ImageAccess object to be subtracted<DD><CODE>im2</CODE> - an ImageAccess object to be subtracted</DL>
</DD>
</DL>
<HR>

<A NAME="divide(ImageAccess, ImageAccess)"><!-- --></A><H3>
divide</H3>
<PRE>
public void <B>divide</B>(<A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im1,
                   <A HREF="ImageAccess.html">ImageAccess</A>&nbsp;im2)</PRE>
<DL>
<DD>An ImageAccess object calls this method for dividing
 two ImageAccess objects.

 [this = im1 / im2]

 The resulting ImageAccess and the two operands should have 
 the same size.<DD><DL>
<DT><B>Parameters:</B><DD><CODE>im1</CODE> - numerator<DD><CODE>im2</CODE> - denominator</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2">&nbsp;</TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY: &nbsp;INNER&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL: &nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>

</BODY>
</HTML>
