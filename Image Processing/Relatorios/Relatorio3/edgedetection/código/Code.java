import ij.*; public class CodeClass {	/**	* Implements a gaussian smooth filter with a parameter sigma. 	*/	static public ImageAccess blurring(ImageAccess input, double sigma) {		int nx = input.getWidth();		int ny = input.getHeight();		ImageAccess out = new ImageAccess(nx, ny);		int N = 3;		double poles[] = new double[N];						double a = 0.5;			// To be changed				poles[0] = poles[1] = poles[2] = a;				// Add your code here				// Call this method below if your routine doesn't work:		// out = TeacherCode.blurring(input, sigma);		return out;	}	/**	* Computes the gradient of an image with two 3*3 kernels.	*/	static public ImageAccess[] gradient(ImageAccess input) {		int nx = input.getWidth();		int ny = input.getHeight();		ImageAccess grad[] = new ImageAccess[3];				grad[0] = new ImageAccess(nx, ny);	// Module of the gradient		grad[1] = new ImageAccess(nx, ny);	// gradient in X		grad[2] = new ImageAccess(nx, ny);	// gradient in Y				// Add your code here				// Call this method below if your routine doesn't work:		// grad = TeacherCode.gradient(input);		return grad;	}	/**	* Suppresses the non maximum in the direction of the gradient.	*/	static public ImageAccess suppressNonMaximum(ImageAccess grad[]) {		if (grad.length != 3)			return null;					// Add your code here				// Call this method below if your routine doesn't work:		// out = TeacherCode.suppressNonMaximum(grad);		return null;	}	/**	*/	static public double[] computeXProjectionGradient(ImageAccess image) {		int ny = image.getHeight();		double proj[] = new double[ny];				// Add your code here 6.1				DisplayTools.plot(proj, "Y", "Intensities");		return proj;	}		/**	*/	static public void measureLevel(ImageAccess sequence[]) {		int nt = sequence.length;				IJ.write("Example of printing values : " + nt);				// Add your code here 6.2		DisplayTools.drawLine(0, 20);			// Example					// Add your code here 6.3		DisplayTools.drawLevels(0, 25, 45);		// Example	}}