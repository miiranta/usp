import ij.*;import ij.process.*;import ij.gui.*;import java.awt.*;/*** IP-LAB* ImageProcessing Laboratories** Freely available software and computer sessions for teaching and programming image processing in Java.** Reference* D. Sage, M. Unser* "Teaching Image-Processing Programming in Java,"* IEEE Signal Processing Magazine, vol. 20, no. 6, pp. 43-52, November 2003.**//***/public class RadialUnwarp_ {	public RadialUnwarp_() {			ImagePlus imp = WindowManager.getCurrentImage();		if (imp == null) {			IJ.showMessage("No open image.");			return;		}		if (imp.getType() != ImagePlus.GRAY8 && imp.getType() != ImagePlus.GRAY32) {			IJ.showMessage("Only process the 8-bit or 32-bit image");			return;		}		int nx = imp.getWidth();		int ny = imp.getHeight();					ImageAccess image = new ImageAccess(imp.getProcessor());		ImagePlus animation = null;		ImageStack stack = new ImageStack(nx, ny);				GenericDialog gd = new GenericDialog("Radial Unwrap");		gd.addNumericField("d - min:", 0.7, 1);		gd.addNumericField("d - max:", 0.9, 1);		gd.addNumericField("d - number of steps:", 10, 1);		gd.showDialog();		if (gd.wasCanceled())			return;		double start = gd.getNextNumber();		double end = gd.getNextNumber();		int n = (int)gd.getNextNumber();		if (n < 1) {			IJ.error("Number of steps too low");			return;		}		if (n > 200) {			IJ.error("Number of steps too high");			return;		}		if (start > end) {			IJ.error("Starting > Ending !");			return;		}						for (int k = 0; k< n; k++) {			stack.addSlice("", image.createByteProcessor());		}				for (int k = 0; k< n; k++) {			double d = start + k*(end-start)/n;			ImageAccess output = InterpolationSolution.unwarp(image, d);			ByteProcessor bp = output.createByteProcessor();			stack.setSliceLabel("d:" + IJ.d2s(d,4), k+1);			stack.setPixels(bp.getPixels(), k+1);			if (k==0) {				animation = new ImagePlus("Radial Unwrap of " + imp.getTitle(), stack);				animation.show();			}			animation.getProcessor().resetMinAndMax();			animation.setSlice(k+1);			animation.updateAndDraw();		}	}}/***/public class Resize_ {	public Resize_() {			ImagePlus imp = WindowManager.getCurrentImage();		if (imp == null) {			IJ.showMessage("No open image.");			return;		}		if (imp.getType() != ImagePlus.GRAY8 && imp.getType() != ImagePlus.GRAY32) {			IJ.showMessage("Only process the 8-bit or 32-bit image");			return;		}		int nx = imp.getWidth();		int ny = imp.getHeight();					ImageAccess input = new ImageAccess(imp.getProcessor());		String list[] = {"Nearest-Neighbor", "Bilinear", "Cubic Spline"};		GenericDialog gd = new GenericDialog("Resize");		gd.addChoice("Interpolation", list, "Linear");		gd.addNumericField("Size in X", 400, 0);		gd.addNumericField("Size in Y", 250, 0);		gd.showDialog();		if (gd.wasCanceled())			return;		String interpolation = gd.getNextChoice();		int mx = (int)gd.getNextNumber();		int my = (int)gd.getNextNumber();				ImageAccess output = CodeClass.resize(input, mx, my, interpolation);		output.show("Resize [" + interpolation + "]");	}}/***/public class TeacherResize_ {	public TeacherResize_() {			ImagePlus imp = WindowManager.getCurrentImage();		if (imp == null) {			IJ.showMessage("No open image.");			return;		}		if (imp.getType() != ImagePlus.GRAY8 && imp.getType() != ImagePlus.GRAY32) {			IJ.showMessage("Only process the 8-bit or 32-bit image");			return;		}		int nx = imp.getWidth();		int ny = imp.getHeight();					ImageAccess input = new ImageAccess(imp.getProcessor());		String list[] = {"Nearest-Neighbor", "Bilinear", "Cubic Spline"};		GenericDialog gd = new GenericDialog("Resize");		gd.addChoice("Interpolation", list, "Linear");		gd.addNumericField("Size in X", 400, 0);		gd.addNumericField("Size in Y", 250, 0);		gd.showDialog();		if (gd.wasCanceled())			return;		String interpolation = gd.getNextChoice();		int mx = (int)gd.getNextNumber();		int my = (int)gd.getNextNumber();				ImageAccess output = InterpolationSolution.resize(input, mx, my, interpolation);		output.show("Teacher Resize [" + interpolation + "]");	}}/***/public class WhatTime_ {	public WhatTime_() {			ImagePlus imp = WindowManager.getCurrentImage();		if (imp == null) {			IJ.showMessage("No open image.");			return;		}		if (imp.getType() != ImagePlus.GRAY8 && imp.getType() != ImagePlus.GRAY32) {			IJ.showMessage("Only process the 8-bit or 32-bit image");			return;		}		ImageAccess image = new ImageAccess(imp.getProcessor());		String s = CodeClass.whatTime(image);		ImageProcessor ip = imp.getProcessor();		ip.setColor(Color.white);		ip.setFont(new Font("Courier", Font.BOLD, 24));		ip.drawString(s, 10, 30);		imp.updateAndDraw();					}}